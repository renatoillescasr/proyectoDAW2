{
  "_from": "mongoose-relationship",
  "_id": "mongoose-relationship@0.1.5",
  "_inBundle": false,
  "_integrity": "sha1-KpX96uQfKVqB2bMn+tHPZK8Twno=",
  "_location": "/mongoose-relationship",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongoose-relationship",
    "fetchSpec": "latest",
    "name": "mongoose-relationship",
    "raw": "mongoose-relationship",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-relationship/-/mongoose-relationship-0.1.5.tgz",
  "_shasum": "2a95fdeae41f295a81d9b327fad1cf64af13c27a",
  "_spec": "mongoose-relationship",
  "_where": "C:\\Users\\Renato\\Desktop\\Renato\\proyectoV2",
  "author": {
    "email": "mike@parallelboxes.com",
    "name": "Mike Sabatini"
  },
  "bugs": {
    "url": "https://github.com/sabymike/mongoose-relationship/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "0.2.10",
    "lodash": "^3.3.1"
  },
  "deprecated": false,
  "description": "mongoose plugin to create maintain one-many and many-many bidirectional relationships between two schemas",
  "devDependencies": {
    "mocha": "^2.1.0",
    "mongoose": "~3.8.24",
    "should": "^5.1.0"
  },
  "homepage": "https://github.com/sabymike/mongoose-relationship#readme",
  "keywords": [
    "mongoose",
    "parent"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mongoose-relationship",
  "optionalDependencies": {},
  "readme": "## mongoose-relationship\n\n_**Note**: Maintenence on this module is deprecated. I had personally been using it for a project and over time have realized that bi-directional relationships in mongoose can become extremely complex and hinder performance as a project grows. The more I learn about mongo and designing data for it, the less likely these relationships make sense._\n\nA mongoose plugin that creates and manages relationships between two separate models. These relationships can be One-To-One, One-To-Many, or Many-To-Many. These changes are currently one-direction. If you manipulate a parents \"child\" property or collection, the child values will not be updated. Only changes made to the child model will update its parent.\n\n#Install\nInstall via NPM\n\n        npm install mongoose-relationship\n\n# Usage\n\n##One-To-Many\n```js\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar Parent = mongoose.model(\"Parent\", ParentSchema);\n\nvar ChildSchema = new Schema({\n    parent: { type:Schema.ObjectId, ref:\"Parent\", childPath:\"children\" }\n});\nChildSchema.plugin(relationship, { relationshipPathName:'parent' });\nvar Child = mongoose.model(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar child = new Child({parent:parent._id});\nchild.save() //the parent children property will now contain child's id\nchild.remove() //the parent children property will no longer contain the child's id\n```\n\n##Many-To-Many\n```js\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar Parent = mongoose.model(\"Parent\", ParentSchema);\n\nvar ChildSchema = new Schema({\n    parents: [{ type:Schema.ObjectId, ref:\"Parent\", childPath:\"children\" }]\n});\nChildSchema.plugin(relationship, { relationshipPathName:'parents' });\nvar Child = mongoose.model(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar parentTwo = new Parent({});\nparentTwo.save();\n\nvar child = new Child({});\nchild.parents.push(parent);\nchild.parents.push(parentTwo);\nchild.save() //both parent and parentTwo children property will now contain the child's id\nchild.remove() //both parent and parentTwo children property will no longer contain the child's id\n```\n\n##Many-To-Many with Multiple paths\n```js\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar Parent = mongoose.model(\"Parent\", ParentSchema);\n\nvar OtherParentSchema = new Schema({\n    children:[{ type:Schema.ObjectId, ref:\"Child\" }]\n});\nvar OtherParent = mongoose.model(\"OtherParent\", OtherParentSchema);\n\nvar ChildSchema = new Schema({\n    parents: [{ type:Schema.ObjectId, ref:\"Parent\", childPath:\"children\" }]\n    otherParents: [{ type:Schema.ObjectId, ref:\"OtherParent\", childPath:\"children\" }]\n});\nChildSchema.plugin(relationship, { relationshipPathName:['parents', 'otherParents'] });\nvar Child = mongoose.model(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar otherParent = new OtherParent({});\notherParent.save();\n\nvar child = new Child({});\nchild.parents.push(parent);\nchild.otherParents.push(otherParent);\nchild.save() //both parent and otherParent children property will now contain the child's id\nchild.remove() //both parent and otherParent children property will no longer contain the child's id\n```\n\n##One-To-One\n**This usage scenario will overwrite the parent's field of multiple children are assigned the same parent. The use case for this operation seems to be limited and only included for a sense of completion.**\n\n```js\nvar mongoose = require(\"mongoose\"),\n    Schema = mongoose.Schema,\n    relationship = require(\"mongoose-relationship\");\n\nvar ParentSchema = new Schema({\n    child:{ type:Schema.ObjectId, ref:\"Child\" }\n});\nvar Parent = mongoose.model(\"Parent\", ParentSchema);\n\nvar ChildSchema = new Schema({\n    parent: { type:Schema.ObjectId, ref:\"Parent\", childPath:\"child\" }\n});\nChildSchema.plugin(relationship, { relationshipPathName:'parent' });\nvar Child = mongoose.model(\"Child\", ChildSchema)\n\nvar parent = new Parent({});\nparent.save();\nvar child = new Child({parent:parent._id});\nchild.save() // The parent's child property will now be set to the child's _id;\nchild.remove() // The parent's child property will now be unset\n```\n\n###Options\n\n####Plugin\nThe plugin currently has the following options\n\n- **relationshipPathName**\n\n    A string or array to let the plugin know which path(s) on your schema the relationship will be created. Defaults to **relationship**\n\n- **triggerMiddleware**\n\n    Boolean value which, if set to true, will explicitly save any parents entities when a relationship is updated causing save middleware to execute. Defaults to **false**\n\n####Path Value\nWhen creating a path on a schema that will represent the relationship, the childPath option is required\n\n- **childPath**\n\n    A string which should match an existing path in target ref schema. If this path does not exist the plugin will have no affect on the target ref.\n\n- **validateExistence**\n\n    Boolean value that tells mongoose-relationship to ensure that the parent exists before setting the relationship for the child. Defaults to **false**\n\n- **upsert**\n\n    Boolean value that controls whether a parent should be created if it does not exist upon child save. Defaults to **false**\n\n# Tests\nTest can be run simply by installing and running mocha\n\n    npm install -g mocha\n    mocha\n\n#Authors\nMike Sabatini [@mikesabatini](https://twitter.com/mikesabatini)\n\n#License\nCopyright Mike Sabatini 2014\nLicensed under the MIT License. Enjoy\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sabymike/mongoose-relationship.git"
  },
  "scripts": {
    "test": "mocha test -R spec"
  },
  "version": "0.1.5"
}
